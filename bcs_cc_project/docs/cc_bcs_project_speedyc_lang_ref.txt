-------- 0 POSSIBLE (EXTRA?) FEATURES OF THE LANGUAGE --------------

possible features :
- pass by copy-after
- pass by name
- editor syntax highlighting of SpeedyC language
- type casting support
- for-each loop
- multi-dimensional arrays
- constants?
- ternary operator
- post- / pre- increment / decrement features?
- python stuff like supporting strings with ', ", and ''' ?
  (and ''' being for multiple line strings without escape characters?)
- string replication, so "Once" * 5 becomes "OnceOnceOnceOnceOnce".
- global declarations and preprocessing
- strings


--------------------- 1 PROLOGUE -----------------------------------

Since the project will be focused on the compiler part, I think
it is important that our language should be clear and decisive,
both from an educational point of view and a point of focus;
the focus should be on learning how to implement a complete compiler,
not on how to make or design "the best, original and most feature rich" programming language.

We have types, statements, expressions, scoping rules, comments.

SpeedyC will be based on C with a little different syntax (python like) syntax.

Program name extension of speedy c will be myspeedycprogram.spc

(A regular expression is a sequence of characters that specifies a
 search pattern in text).

Meaning of certain regular expressions / syntax below:
	x* means 0 or more instances of x
	x+ means 1 or more instances of x
	x? means 0 or 1 instance of x
	[x] means x is optional
    "x" means x should be interpreted as a literal character

Literal characters in the syntax will be enclosed by
double quotation marks, e.g. "{" STATEMENT "}".

Scoping will be almost the same as scoping rules in C.
- You have local and global variables, and formal parameters.
- Variables inside a function or block are called local variables.
    - Those variables can only be referenced from within that scope, or a deeper scope.
- One difference between C and SpeedyC is that a redeclaration of a variable,
  even if it is in a more inner scope, is not allowed to prevent disambiguation.
 - Formal parameters are treated as local variables in a function and they
   take precedence over global variables.


Just as in C, there must be a reference (to a ?) program, itself or another ?
containing a main declaration.


--------------------- 2 TYPES -----------------------------------

variable types   :

"Bool"    : true or false
"Int"     : 32-bit signed integer value
"Char"    : a character (8 bits) (signed or not?)
"Float"   : a floating point value
"String"  : empty or nonempty string containing characters

Every type can be contained into an array, you do so by using the syntax :

Bool[] boolean_array_name = init Bool[];

Arrays will be initialized with either zeros,
the zero char, false, and an empty string in case of a string.

(We start with single dimension arrays only.)


--------------------- 3 SYNTAX OF STATEMENTS  -----------------------------------
- Functions with a return type have to return something, and every function can return pre-emptively
Control flow keywords start with a capital letter. 


A statement can be :
	(1) a function block, which must be enclosed with curly brackets
	(2) definition of a variable / array
	(3) an assignment
	(4) an expression
	(5) a return call
	(6) control flow
	

Function block :
	"{" STATEMENT* "}"

Variable definition :
	TYPE IDENTIFIER = EXPRESSION ";"

Array definition :
	TYPE [EXPRESSION] IDENTIFIER ";"

Assignment :
	VARIABLE = EXPRESSION;
	VARIABLE MODIFIER EXPRESSION

    Modifier:
        += | -= | *= | /= | %=

    Variable :
    	IDENTIFIER | INDEX

    Index :
    	EXPRESSION [EXPRESSION]

Expression :
    * Will be defined separately below.

Return :
	"Return" [EXPRESSION];

Control Flow :
    "If" EXPRESSION STATEMENT* ["Else" STATEMENT*] 
    "For" EXPRESSION ";" (EXPRESSION) ";" EXPRESSION "{" [STATEMENT*] "}"
    "While" (EXPRESSION) STATEMENT
    "Break" ";"
    "Continue" ";"

IDENTIFIER	: [a-zA-Z]([a-zA-Z0-9])*


----------------- 4 EXPRESSIONS ---------------------------------------------

A expression can be :
    (1) UNARY_OPERATOR EXPRESSION
    (2) EXPRESSION BITWISE_OPERATOR EXPRESSION
    (3) "(" EXPRESSION ")"
    (4) FUNCTION_CALL
    (5) VARIABLE
    (6) CONSTANT

UNARY_OPERATOR :
    "!" | "-"

BITWISE_OPERATOR :
    ARITHMETIC_OPERATOR | RELATIONAL_OPERATOR | LOGICAL_OPERATOR | EQUALITY_OPERATOR

ARITHMETIC_OPERATOR :
    "+" | "-" | "*" | "%"

RELATIONAL_OPERATOR :
    "<" | ">" | "<=" | ">="

EQUALITY_OPERATOR :
    "== " | "!=" |

LOGICAL_OPERATOR :
    "&&" | "||"

CONSTANT :
    INTEGER_CONSTANT   | FLOAT_CONSTANT | BOOLEAN_COSTANT | CHARACTER_CONSTANT

INTEGER_CONSTANT   : [0-9]+
FLOAT_CONSTANT     : [0-9]+"."[O-9]+ | "."[O-9]+
BOOLEAN_COSTANT    : "True" | "False"
CHARACTER_CONSTANT : "'"[0-9a-fA-F]"'"




------------------ RESERVED KEYWORDS -------------------------------------

This is basically to tell our parser which words need to be reserved since they will 
have special meaning and, cannot for instance be used as variable names. 
(e.g. String String = "www.mywebsite.com"; should be prohibited and give an error).

A collection of keywords :
Bool, Int, Char, Float, String, If, For, While, Return, Continue, 



------------------- 5 COMMENTS ------------------------------------------------

SpeedyC will have 3 kinds of comments :
- // will comment everything pass the 2 slashes on that line.
- /* */ will comment everything between the /* and */, can be over multiple lines.
- /^ will comment everything before the /^, can be multiple lines.


--------------------- EXAMPLE PROGRAMS -----------------------------------------


/* Testing data types. This program should give no parsing errors. */
---------- PROGRAM 1 ------
int main() {
    bool b = false;
	int num = 9999;
	char c = 'x';
	float f1 = 123012.234;
	float f2 = .0293923;
	string name = "daniel";
	

    Return 0;
}
------------------------------

/* Testing conditionals. This program should give no parsing errors. */
---------- PROGRAM 2 ------
int main() {
	If 5 > 3 {
		char c = 'c';
	}
	Else {
		char x = 'x';
	}
	
	For int i = 0; i < 10; i++ {
		int temp = i*i;
		
		If i % 2 == 0 {
			Continue;
		}
	
	}
	
	int num = 0;
	
	While num < 10 {
		num++;
	}
	

    Return 0;
}
------------------------------

/* Testing operators. This program should give no parsing errors. */
---------- PROGRAM 3 ------
int main() {
	bool b = !true;
	int five = -5;
	
	If 10 > 5 && 5 < 10 && 20 >= 20 && 30 <= 30 || 10 == 10 || 90 != 100 {
		string i_should_be_alive = "hey there";
	}
	Else 
		int ten10 = 10;
	
	Return 0;
}
------------------------------




---------- PROGRAM 1 ------
int main() {
    int a = 5;
    int b = 10;

    If a > b
        print("a is greater then b!");
    Else
        print("a is smaller than b!");

    return 0;
}
------------------------------

---------- PROGRAM 2 ------
int main() {
    int c = 10;

    For int i = 0; i < 5; i++ {
        c = i + 1;
    }

    return 0;
}
------------------------------

---------- PROGRAM 3 ------
int main() {
    int a = 5;
    int b = 10;

    If a > b
        print("a is greater then b!");
    Else
        print("a is smaller than b!");

    return 0;
}
------------------------------














